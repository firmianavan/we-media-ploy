//this file is generated by go-type-generater, you should not modify it.
//any change will be lost after rerun go-type-generator
package entity

import (
	"database/sql"
	"time"
)

type RowMaper interface {
	//返回表名和字段映射
	RowMap() (string, map[string]Column)
}

type ColumnMata struct {
	Field   string //数据库字段名
	Type    string //数据库的字段类型, 可以用来做长度验证
	Null    string //是否可为空"YES"or"NO"
	Key     string //"PRI","UNI"
	Default string //默认值
	Extra   string //
	GoType  string //go中对应字段使用的类型
	GoField string //go中对应字段名
}
type Column struct {
	Meta *ColumnMata
	V    interface{}
}

type Article struct {
	ArticleId  int64     `json:"article_id" bson:"article_id"`
	UserId     int64     `json:"user_id" bson:"user_id"`
	Title      string    `json:"title" bson:"title"`
	Body       string    `json:"body" bson:"body"`
	CategoryId int64     `json:"category_id" bson:"category_id"`
	Created    time.Time `json:"created" bson:"created"`
	Updated    time.Time `json:"updated" bson:"updated"`
	Draft      string    `json:"draft" bson:"draft"`
}

const Const_Article_Draft_false string = "false"
const Const_Article_Draft_true string = "true"

var articleArticleId ColumnMata = ColumnMata{Field: "article_id", Type: "int(11)", Null: "NO", Key: "PRI", Default: "{ false}", Extra: "auto_increment", GoType: "int64", GoField: "ArticleId"}
var articleUserId ColumnMata = ColumnMata{Field: "user_id", Type: "int(11)", Null: "NO", Key: "MUL", Default: "{ false}", Extra: "", GoType: "int64", GoField: "UserId"}
var articleTitle ColumnMata = ColumnMata{Field: "title", Type: "varchar(150)", Null: "NO", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Title"}
var articleBody ColumnMata = ColumnMata{Field: "body", Type: "text", Null: "NO", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Body"}
var articleCategoryId ColumnMata = ColumnMata{Field: "category_id", Type: "int(11)", Null: "NO", Key: "MUL", Default: "{ false}", Extra: "", GoType: "int64", GoField: "CategoryId"}
var articleCreated ColumnMata = ColumnMata{Field: "created", Type: "timestamp", Null: "NO", Key: "", Default: "{CURRENT_TIMESTAMP true}", Extra: "", GoType: "time.Time", GoField: "Created"}
var articleUpdated ColumnMata = ColumnMata{Field: "updated", Type: "timestamp", Null: "NO", Key: "", Default: "{CURRENT_TIMESTAMP true}", Extra: "on update CURRENT_TIMESTAMP", GoType: "time.Time", GoField: "Updated"}
var articleDraft ColumnMata = ColumnMata{Field: "draft", Type: "enum('false','true')", Null: "NO", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Draft"}

func (article *Article) RowMap() (tableName string, colMap map[string]Column) {
	colMap = map[string]Column{
		"article_id":  Column{Meta: &articleArticleId, V: &article.ArticleId},
		"user_id":     Column{Meta: &articleUserId, V: &article.UserId},
		"title":       Column{Meta: &articleTitle, V: &article.Title},
		"body":        Column{Meta: &articleBody, V: &article.Body},
		"category_id": Column{Meta: &articleCategoryId, V: &article.CategoryId},
		"created":     Column{Meta: &articleCreated, V: &article.Created},
		"updated":     Column{Meta: &articleUpdated, V: &article.Updated},
		"draft":       Column{Meta: &articleDraft, V: &article.Draft},
	}
	return "article", colMap
}

type Category struct {
	CategoryId int64     `json:"category_id" bson:"category_id"`
	UserId     int64     `json:"user_id" bson:"user_id"`
	Name       string    `json:"name" bson:"name"`
	Introduce  string    `json:"introduce" bson:"introduce"`
	Created    time.Time `json:"created" bson:"created"`
	Cover      string    `json:"cover" bson:"cover"`
	Visible    string    `json:"visible" bson:"visible"`
}

const Const_Category_Visible_public string = "public"
const Const_Category_Visible_private string = "private"
const Const_Category_Visible_only_to_friend string = "only_to_friend"

var categoryCategoryId ColumnMata = ColumnMata{Field: "category_id", Type: "int(11)", Null: "NO", Key: "PRI", Default: "{ false}", Extra: "auto_increment", GoType: "int64", GoField: "CategoryId"}
var categoryUserId ColumnMata = ColumnMata{Field: "user_id", Type: "int(11)", Null: "NO", Key: "MUL", Default: "{ false}", Extra: "", GoType: "int64", GoField: "UserId"}
var categoryName ColumnMata = ColumnMata{Field: "name", Type: "varchar(30)", Null: "YES", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Name"}
var categoryIntroduce ColumnMata = ColumnMata{Field: "introduce", Type: "varchar(60)", Null: "YES", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Introduce"}
var categoryCreated ColumnMata = ColumnMata{Field: "created", Type: "timestamp", Null: "NO", Key: "", Default: "{CURRENT_TIMESTAMP true}", Extra: "", GoType: "time.Time", GoField: "Created"}
var categoryCover ColumnMata = ColumnMata{Field: "cover", Type: "varchar(200)", Null: "YES", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Cover"}
var categoryVisible ColumnMata = ColumnMata{Field: "visible", Type: "enum('public','private','only-to-friend')", Null: "NO", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Visible"}

func (category *Category) RowMap() (tableName string, colMap map[string]Column) {
	colMap = map[string]Column{
		"category_id": Column{Meta: &categoryCategoryId, V: &category.CategoryId},
		"user_id":     Column{Meta: &categoryUserId, V: &category.UserId},
		"name":        Column{Meta: &categoryName, V: &category.Name},
		"introduce":   Column{Meta: &categoryIntroduce, V: &category.Introduce},
		"created":     Column{Meta: &categoryCreated, V: &category.Created},
		"cover":       Column{Meta: &categoryCover, V: &category.Cover},
		"visible":     Column{Meta: &categoryVisible, V: &category.Visible},
	}
	return "category", colMap
}

type Tags struct {
	ArticleId int64  `json:"article_id" bson:"article_id"`
	Name      string `json:"name" bson:"name"`
}

var tagsArticleId ColumnMata = ColumnMata{Field: "article_id", Type: "int(11)", Null: "NO", Key: "MUL", Default: "{ false}", Extra: "", GoType: "int64", GoField: "ArticleId"}
var tagsName ColumnMata = ColumnMata{Field: "name", Type: "varchar(20)", Null: "NO", Key: "MUL", Default: "{ false}", Extra: "", GoType: "string", GoField: "Name"}

func (tags *Tags) RowMap() (tableName string, colMap map[string]Column) {
	colMap = map[string]Column{
		"article_id": Column{Meta: &tagsArticleId, V: &tags.ArticleId},
		"name":       Column{Meta: &tagsName, V: &tags.Name},
	}
	return "tags", colMap
}

type User struct {
	UserId    int64         `json:"user_id" bson:"user_id"`
	Account   string        `json:"account" bson:"account"`
	Passwd    string        `json:"passwd" bson:"passwd"`
	Name      string        `json:"name" bson:"name"`
	Email     string        `json:"email" bson:"email"`
	Age       sql.NullInt64 `json:"age" bson:"age"`
	Address   string        `json:"address" bson:"address"`
	Score     sql.NullInt64 `json:"score" bson:"score"`
	Introduce string        `json:"introduce" bson:"introduce"`
	Created   time.Time     `json:"created" bson:"created"`
}

var userUserId ColumnMata = ColumnMata{Field: "user_id", Type: "int(11)", Null: "NO", Key: "PRI", Default: "{ false}", Extra: "auto_increment", GoType: "int64", GoField: "UserId"}
var userAccount ColumnMata = ColumnMata{Field: "account", Type: "varchar(30)", Null: "YES", Key: "UNI", Default: "{ false}", Extra: "", GoType: "string", GoField: "Account"}
var userPasswd ColumnMata = ColumnMata{Field: "passwd", Type: "varchar(60)", Null: "NO", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Passwd"}
var userName ColumnMata = ColumnMata{Field: "name", Type: "varchar(30)", Null: "NO", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Name"}
var userEmail ColumnMata = ColumnMata{Field: "email", Type: "varchar(60)", Null: "YES", Key: "UNI", Default: "{ false}", Extra: "", GoType: "string", GoField: "Email"}
var userAge ColumnMata = ColumnMata{Field: "age", Type: "int(11)", Null: "YES", Key: "", Default: "{ false}", Extra: "", GoType: "sql.NullInt64", GoField: "Age"}
var userAddress ColumnMata = ColumnMata{Field: "address", Type: "varchar(60)", Null: "YES", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Address"}
var userScore ColumnMata = ColumnMata{Field: "score", Type: "int(11)", Null: "YES", Key: "", Default: "{0 true}", Extra: "", GoType: "sql.NullInt64", GoField: "Score"}
var userIntroduce ColumnMata = ColumnMata{Field: "introduce", Type: "varchar(300)", Null: "YES", Key: "", Default: "{ false}", Extra: "", GoType: "string", GoField: "Introduce"}
var userCreated ColumnMata = ColumnMata{Field: "created", Type: "timestamp", Null: "NO", Key: "", Default: "{CURRENT_TIMESTAMP true}", Extra: "", GoType: "time.Time", GoField: "Created"}

func (user *User) RowMap() (tableName string, colMap map[string]Column) {
	colMap = map[string]Column{
		"user_id":   Column{Meta: &userUserId, V: &user.UserId},
		"account":   Column{Meta: &userAccount, V: &user.Account},
		"passwd":    Column{Meta: &userPasswd, V: &user.Passwd},
		"name":      Column{Meta: &userName, V: &user.Name},
		"email":     Column{Meta: &userEmail, V: &user.Email},
		"age":       Column{Meta: &userAge, V: &user.Age},
		"address":   Column{Meta: &userAddress, V: &user.Address},
		"score":     Column{Meta: &userScore, V: &user.Score},
		"introduce": Column{Meta: &userIntroduce, V: &user.Introduce},
		"created":   Column{Meta: &userCreated, V: &user.Created},
	}
	return "user", colMap
}
